#!/usr/bin/env python
import functools
import signal
import sys

from itertools import starmap
from subprocess import Popen

import baker

from warhol import helpers


moduleformat = 'warhol.warhol:init(filename="{}")'.format


def sigint(proc, *args):
    """Kill gunicorn when we get a sigint."""
    proc.terminate()


def gunicorn(module, options):
    """Launch gunicorn to handle the worker threads."""

    arguments = {'name': 'warhol',
                 'bind': '127.0.0.1:1928',
                 'workers': 2,
                 'log-level': 'error'}

    arguments.update(options)

    args = starmap('--{}={}'.format, arguments.iteritems())

    command = ('gunicorn', '--preload') + tuple(args) + (module, )
    return Popen(command, stdout=sys.stdout, stdin=sys.stdin, shell=False)


@baker.command
def match(config, filename):
    """
    Print out each filename that would match for the given filename.

    Useful to test what assets would match for a given domain or request.

    $ warhol ~/.warhol/config google.com.js
    """
    pass


@baker.command
def test(config):
    """
    Test the specified configuration.    """

    pass


@baker.command(default=True)
def run(config):
    config = helpers.fullpath(config)
    print('Configuration: {}'.format(config))
    gunicorn(moduleformat(config), {})


if __name__ == '__main__':
    baker.run()

    # options = config.get('gunicorn', {})
    # workers = warhol.gunicorn(app, **options)
    # signal.signal(signal.SIGINT, functools.partial(warhol.sigint, warhol.workers))
    # warhol.workers.wait()
    exit(0)
